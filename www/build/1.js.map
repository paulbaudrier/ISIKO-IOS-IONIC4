{"version":3,"sources":["../../src/pages/login/login.module.ts","../../src/pages/login/login.ts","../../src/pages/register/register.ts"],"names":[],"mappings":"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","file":"1.js","sourcesContent":["import { NgModule } from '@angular/core';\r\nimport { TranslateModule } from '@ngx-translate/core';\r\nimport { IonicPageModule } from 'ionic-angular';\r\n\r\nimport { LoginPage } from './login';\r\n\r\n@NgModule({\r\n  declarations: [\r\n    LoginPage,\r\n  ],\r\n  imports: [\r\n    IonicPageModule.forChild(LoginPage),\r\n    TranslateModule.forChild()\r\n  ],\r\n  exports: [\r\n    LoginPage\r\n  ]\r\n})\r\nexport class LoginPageModule { }\r\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.module.ts","<<<<<<< HEAD\nimport { Component } from '@angular/core';\r\nimport { TranslateService } from '@ngx-translate/core';\r\nimport { IonicPage, NavController, ToastController } from 'ionic-angular';\r\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\r\n\r\nimport { User } from '../../providers';\r\nimport { MainPage } from '../';\r\nimport { HomePage } from '../home/home';\r\n\r\nimport { RegisterPage } from '../register/register';\r\nimport { UserPage } from '../user/user';\r\nimport { AuthService } from '../core/auth.service';\r\n\r\n@IonicPage()\r\n@Component({\r\n  selector: 'page-login',\r\n  templateUrl: 'login.html'\r\n})\r\nexport class LoginPage {\r\n\r\n  loginForm: FormGroup;\r\n  errorMessage: string = '';\r\n  // The account fields for the login form.\r\n  // If you're using the username field with or without email, make\r\n  // sure to add it to the type\r\n  account: { email: string, password: string } = {\r\n    email: 'test@example.com',\r\n    password: 'test'\r\n  };\r\n\r\n  // Our translated text strings\r\n  private loginErrorString: string;\r\n\r\n  constructor(public navCtrl: NavController,\r\n    public user: User,\r\n    public toastCtrl: ToastController,\r\n    public translateService: TranslateService,\r\n    public authService: AuthService,\r\n    public formBuilder: FormBuilder\r\n    ) {\r\n\r\n    this.translateService.get('LOGIN_ERROR').subscribe((value) => {\r\n      this.loginErrorString = value;\r\n    })\r\n  }\r\n\r\n  ionViewWillLoad(){\r\n    this.loginForm = this.formBuilder.group({\r\n      email: new FormControl(),\r\n      password: new FormControl(),\r\n    });\r\n  }\r\n\r\n  tryLogin(value){\r\n    this.authService.doLogin(value)\r\n    .then(res => {\r\n      console.log(res);\r\n      this.navCtrl.push(HomePage);\r\n    }, err => {\r\n      console.log(err);\r\n      this.errorMessage = err.message;\r\n    })\r\n  }\r\n\r\n  tryGoogleLogin(){\r\n    this.authService.doGoogleLogin()\r\n    .then((res) => {\r\n      this.navCtrl.push(HomePage);\r\n    }, (err) => {\r\n      this.errorMessage = err.message;\r\n    });\r\n  }\r\n\r\n  goRegisterPage(){\r\n    this.navCtrl.push(RegisterPage);\r\n  }\r\n\r\n\r\n  // COMPARE LOGIN INFO \r\n\r\n\r\n\r\n  //\r\n\r\n  // Attempt to login in through our User service\r\n  doLogin() {\r\n      this.navCtrl.push(HomePage);\r\n  }\r\n}\r\n=======\nimport { Component } from '@angular/core';\nimport { TranslateService } from '@ngx-translate/core';\nimport { IonicPage, NavController, ToastController } from 'ionic-angular';\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\n\nimport { User } from '../../providers';\nimport { MainPage } from '../';\nimport { HomePage } from '../home/home';\n\nimport { RegisterPage } from '../register/register';\nimport { UserPage } from '../user/user';\nimport { AuthService } from '../core/auth.service';\n\n@IonicPage()\n@Component({\n  selector: 'page-login',\n  templateUrl: 'login.html'\n})\nexport class LoginPage {\n\n  loginForm: FormGroup;\n  errorMessage: string = '';\n  // The account fields for the login form.\n  // If you're using the username field with or without email, make\n  // sure to add it to the type\n  account: { email: string, password: string } = {\n    email: 'test@example.com',\n    password: 'test'\n  };\n\n  // Our translated text strings\n  private loginErrorString: string;\n\n  constructor(public navCtrl: NavController,\n    public user: User,\n    public toastCtrl: ToastController,\n    public translateService: TranslateService,\n    public authService: AuthService,\n    public formBuilder: FormBuilder\n    ) {\n\n    this.translateService.get('LOGIN_ERROR').subscribe((value) => {\n      this.loginErrorString = value;\n    })\n  }\n\n  ionViewWillLoad(){\n    this.loginForm = this.formBuilder.group({\n      email: new FormControl(),\n      password: new FormControl(),\n    });\n  }\n\n  tryLogin(value){\n    this.authService.doLogin(value)\n    .then(res => {\n      console.log(res);\n      this.navCtrl.push(HomePage);\n    }, err => {\n      console.log(err);\n      this.errorMessage = err.message;\n    })\n  }\n\n  tryGoogleLogin(){\n    this.authService.doGoogleLogin()\n    .then((res) => {\n      this.navCtrl.push(HomePage);\n    }, (err) => {\n      this.errorMessage = err.message;\n    });\n  }\n\n  goRegisterPage(){\n    this.navCtrl.push(RegisterPage);\n  }\n\n\n  // COMPARE LOGIN INFO \n\n\n\n  //\n\n  // Attempt to login in through our User service\n  doLogin() {\n      this.navCtrl.push(HomePage);\n  }\n}\n>>>>>>> 7a39b3d838cb80fb25cfb22fb9924dddb29411a9\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/login/login.ts","import { Component } from '@angular/core';\nimport { NavController } from 'ionic-angular';\n\nimport { FormBuilder, FormGroup, FormControl } from '@angular/forms';\n\nimport { AuthService } from '../core/auth.service';\n\nimport { UserPage } from '../user/user';\n\n\n\n@Component({\n  selector: 'page-register',\n  templateUrl: 'register.html'\n})\nexport class RegisterPage {\n\n  registerForm: FormGroup;\n  errorMessage: string = '';\n  successMessage: string = '';\n\n  constructor(\n    public navCtrl: NavController,\n    public authService: AuthService,\n    public formBuilder: FormBuilder\n  ) {}\n\n  ionViewWillLoad(){\n    this.registerForm = this.formBuilder.group({\n      email: new FormControl(),\n      password: new FormControl()\n    });\n  }\n\n  tryRegister(value){\n    this.authService.doRegister(value)\n     .then(res => {\n       this.errorMessage = \"\";\n       this.successMessage = \"Your account has been created. Please log in now.\";\n     }, err => {\n       this.errorMessage = err.message;\n       this.successMessage = \"\";\n     })\n  }\n\n  tryFacebookLogin(){\n    this.authService.doFacebookLogin()\n    .then((res) => {\n      this.navCtrl.push(UserPage);\n    }, (err) => {\n      this.errorMessage = err.message;\n    });\n  }\n\n  tryGoogleLogin(){\n    this.authService.doGoogleLogin()\n    .then((res) => {\n      this.navCtrl.push(UserPage);\n    }, (err) => {\n      this.errorMessage = err.message;\n    });\n  }\n\n  tryTwitterLogin(){\n    this.authService.doTwitterLogin()\n    .then((res) => {\n      this.navCtrl.push(UserPage);\n    }, (err) => {\n      this.errorMessage = err.message;\n    });\n  }\n\n  goLoginPage(){\n    this.navCtrl.pop();\n  }\n\n}\n\n\n\n// WEBPACK FOOTER //\n// ./src/pages/register/register.ts"],"sourceRoot":""}